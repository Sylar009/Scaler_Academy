Problem Description
Write a program to input two integers N and M. Now you have a 2-D array A of size N * M. It has all the integers from 1 to N * M exactly once and they are inserted in this 2-D array sequentially in a row major order.

E.g.Suppose N = 2 and M = 3, then 2-D array is {{1,2,3},{4,5,6}}

Now you have Q queries of following four types:

1 C1 C2: Swap elements of Column C1 with Column C2.
2 R1 R2: Swap elements of Row R1 with Row R2.
3 X1 Y1 X2 Y2: Print the Bitwise OR of element A[X1][Y1] with A[X2][Y2] in updated 2-D array.
4 X1 Y1 X2 Y2: Print the Bitwise AND of element A[X1][Y1] with A[X2][Y2] in updated 2-D array.


Problem Constraints
1 <= N, M, Q <= 100000

1 <= R1, R2, X1, X2 <= N

1 <= C1, C2, Y1, Y2 <= M



Input Format
First line has three space separated integers N, M and Q.

Next Q lines contain 3 or 5 space seprated integers as per the queries mentioned in the question. (First integer will always be either 1 or 2 or 3 or 4).



Output Format
For each query of type 3 or 4 print a single integer representing answer for that query in one line.



Example Input
Input 1:

2 3 4
1 2 3
3 1 2 2 2
2 1 2
4 1 2 2 3


Example Output
Output 1:

7
2

Answer : 

#include<iostream>
#include<vector>

using namespace std;

int main()  {
    // YOUR CODE GOES HERE
    // Please take input and print output to standard input/output (stdin/stdout)
    // E.g. 'cin' for input & 'cout' for output
    
    int n, m , q;
    cin >> n;
    cin >> m;
    cin >> q;
    
    vector<int> col_swap_array;
    for (int j = 0; j < m; j++) col_swap_array.push_back(j);
    
    vector<int> row_swap_array;
    for (int i = 0; i < n; i++) row_swap_array.push_back(i);
    
    while (q > 0) {
        int option;
        cin >> option;
        
        if (option == 1) {
            int C1,C2;
            cin >> C1;
            cin >> C2;

            swap(col_swap_array[C1-1], col_swap_array[C2-1]);
            
        }
        
        else if (option == 2) {
            int R1, R2;
            cin >> R1;
            cin >> R2;
            
            swap(row_swap_array[R1-1], row_swap_array[R2-1]);
            
            
        }
        
        else if (option == 3) {
            int X1, Y1, X2, Y2;
            cin >> X1;
            cin >> Y1;
            cin >> X2;
            cin >> Y2;
            
            X1--; Y1--; X2--; Y2--;
            
            int val1 = (m * row_swap_array[X1]) + col_swap_array[Y1] + 1;
            int val2 = (m * row_swap_array[X2]) + col_swap_array[Y2] + 1;
            
            
            
            cout << (val1 | val2) << endl;
        }
        
        else if (option == 4) {
            int X1, Y1, X2, Y2;
            cin >> X1;
            cin >> Y1;
            cin >> X2;
            cin >> Y2;
            
            X1--; Y1--; X2--; Y2--;
            
            int val1 = (m * row_swap_array[X1]) + col_swap_array[Y1] + 1;
            int val2 = (m * row_swap_array[X2]) + col_swap_array[Y2] + 1;
            
            
            
            cout << (val1 & val2) << endl;
        }
    
        q--;
    }
    
    return 0;
}


