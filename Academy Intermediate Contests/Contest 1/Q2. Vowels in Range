Problem Description
Given a string A of length N consisting of lower case alphabets and Q queries given by the 2D array B of size Q*2. Each query consists of two integers B[i][0] and B[i][1].
For every query, the task is to find the count of vowels in the substring A[B[i][0]â€¦B[i][1]].


Problem Constraints
1 <= N <= 105
1 <= Q <= 105
0 <= B[i][0] <= B[i][1] < N


Input Format
First argument A is a string.
Second argument B is a 2D array of integers.


Output Format
Return an array of integers.


Example Input
Input 1:
A = "scaler"
B = [   [0,2] 
        [2,4]   ]
Input 2:
A = "interviewbit"
B = [   [0,4] 
        [9,10]   ]


Example Output
Output 1:
[1, 2]
Output 2:
[2, 1]


Example Explanation
For Input 1:
The substring for the first query is "sca" which contains 1 vowel.
The substring for the second query is "ale" which contains 2 vowels.
For Input 2:
The substring for the first query is "inter" which contains 2 vowels.
The substring for the second query is "bi" which contains 1 vowel.


Answer :

vector<int> Solution::solve(string A, vector<vector<int> > &B) {
    vector<int> result;
    
    vector<int> pf_vow_count;
    int count = 0;
    for (char a : A) {
        if (a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u') {
            count++;
        }
        pf_vow_count.push_back(count);
    }
    
    for (vector<int> b : B) {
        int s = b[0];
        int e = b[1];
        result.push_back((s == 0) ? pf_vow_count[e] : (pf_vow_count[e] - pf_vow_count[s-1]));
    }
    
    return result;
}


